service: boilerplate-graphql
useDotenv: true

custom:
  defaultStage: dev
  profiles:
    dev: boilerplate-graphql-advanced
    prod: boilerplate-graphql-advanced

  lambdaLogRetention:
    dev: 14
    prod: 180

  dbName: ${opt:stage, self:custom.defaultStage} # rds requires alphanumeric database names
  dbUserName: ${opt:stage, self:custom.defaultStage}-user
  dbuserPassword: {Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]}
  dbPort: {Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]}
  dbHost: {Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]}
  dbClusterIdentifierName: ${opt:stage, self:custom.defaultStage}-aurora-cluster
  dbClusterDatabaseSecretName: ${self:custom.rds.clusterIdentifierName}-secret

  dbBackupRetentionPeriod: 
    dev: 1
    prod: 14
  dbDeletionProtection:
    dev: false
    prod: true
  dbDeletionPolicy:
    dev: Delete
    prod: Retain
  dbUpdateReplacePolicy:
    dev: Delete
    prod: Retain

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, self:custom.defaultStage}
  stackName: ${opt:stage, self:custom.defaultStage}-${self:service.name}
  profile: ${self:custom.profiles.${opt:stage, self:custom.defaultStage}}
  region: ${opt:region, 'eu-west-1'}
  role: LambdaRole
  memorySize: 192
  timeout: 15
  versionFunctions: false
  logRetentionInDays: ${self:custom.lambdaLogRetention.${opt:stage, self:custom.defaultStage}}
  stackTags:
    APP: graphql
    STAGE: ${opt:stage, self:custom.defaultStage}

  apiGateway:
    shouldStartNameWithService: true
    usagePlan:
      quota:
        limit: 6000 # The maximum number of requests that users can make within the specified time period.
        offset: 0 # For the initial time period, the number of requests to subtract from the specified limit.
        period: DAY # The time period for which the maximum limit of requests applies, such as DAY or WEEK.
      throttle:
        burstLimit: 200
        rateLimit: 100
    
  environment:
    API_PORT: ${env:API_PORT}
    STDOUT_LOGGING: ${env:STDOUT_LOGGING}
    PRODUCTION: ${env:PRODUCTION}
    API_CORS_ENDPOINT: ${env:API_CORS_ENDPOINT}
    TOKEN_PATH: ${env:TOKEN_PATH}
    TOKEN_DOMAIN: ${env:TOKEN_DOMAIN}
    TOKEN_SECRET: ${env:TOKEN_SECRET}
    ACCESS_TOKEN_AGE_SECONDS: ${env:ACCESS_TOKEN_AGE_SECONDS}
    REFRESH_TOKEN_AGE_SECONDS: ${env:REFRESH_TOKEN_AGE_SECONDS}
    DATABASE_TYPE: ${env:DATABASE_TYPE}
    DATABASE_HOST: ${self:custom.dbHost}
    DATABASE_PORT: ${self:custom.dbPort}
    DATABASE_USER: ${self:custom.dbUserName}
    DATABASE_PASSWORD: ${self:custom.dbUserPassword}
    DATABASE_DATABASE_NAME: ${env:DATABASE_DATABASE_NAME}
    
functions:
  graphql:
    handler: app/serverlessHandler.graphqlHandler
    events:
    - http:
        path: graphql
        method: post
    - http:
        path: graphql
        method: get

resources:
  Resources:
    LambdaRole: ${file(./aws/LambdaRole.yml)}
    ServerlessInternetGateway: ${file(./aws/ServerlessInternetGateway.yml)}
    ServerlessVPC: ${file(./aws/ServerlessVPC.yml)}
    ServerlessVPCGA: ${file(./aws/ServerlessVPCGA.yml)}
    ServerlessSubnetA: ${file(./aws/ServerlessSubnetA.yml)}
    ServerlessSubnetB: ${file(./aws/ServerlessSubnetB.yml)}
    ServerlessSubnetGroup: ${file(./aws/ServerlessSubnetGroup.yml)}
    ServerlessSecurityGroup: ${file(./aws/ServerlessSecurityGroup.yml)}
    RouteTablePublic: ${file(./aws/RouteTablePublic.yml)}
    RoutePublic: ${file(./aws/RoutePublic.yml)}
    RouteTableAssociationSubnetA: ${file(./aws/RouteTableAssociationSubnetA.yml)}
    RouteTableAssociationSubnetB: ${file(./aws/RouteTableAssociationSubnetB.yml)}

    AuroraRDSClusterParameter: ${file(./aws/AuroraRDSClusterParameter.yml)}
    AuroraRDSInstanceParameter: ${file(./aws/AuroraRDSInstanceParameter.yml)}
    AuroraRDSCluster: ${file(./aws/AuroraRDSCluster.yml)}
    AuroraRDSInstance: ${file(./aws/AuroraRDSInstance.yml)}

serverless-offline:
  httpPort: 4000

webpack:
  webpackConfig: webpack.config.js
  packager: 'yarn'
  includeModules:
      forceExclude:
        - aws-sdk
      forceInclude:
        - pg

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-prune-plugin
  - serverless-pseudo-parameters