type AuthenticatedUserSuccess {
  user: User!
}

type AuthenticatedUserFailure {
  success: Boolean!
}

union AuthenticatedUserResponse = AuthenticatedUserSuccess | AuthenticatedUserFailure

type Query {
  authenticatedUser: AuthenticatedUserResponse!
}

type LoginUserSuccess {
  token: String!
  user: User!
}

type LoginUserFailure {
  success: Boolean!
}

union LoginUserResponse = LoginUserSuccess | LoginUserFailure

input LoginUserInput {
  username: String!
  password: String!
}

type Mutation {
  login(input: LoginUserInput!): LoginUserResponse!
  logout: Boolean!
}