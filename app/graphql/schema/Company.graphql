type Company {
  UUID: UUID!
  name: String!
  timestamp: Timestamp!
  employees: [Person!]!
}

input CompanyQuery {
  UUID: UUID!
}

union CompanyOutput = CompanySuccess | CompanyFailureNotFound

type CompanySuccess {
  company: Company!
}

type CompanyFailureNotFound {
  success: Boolean!
}

type Query {
  companies(filters: CompanyFilterOperationInput): [Company!]!
  company(input: CompanyQuery!): CompanyOutput!
}

type Mutation {
  addCompany(input: AddCompanyInput!): AddCompanyOutput!
  editCompany(input: EditCompanyInput!): EditCompanyOutput!
}

input AddCompanyInput {
  company: CompanyInput!
}

input EditCompanyInput {
  UUID: UUID!
  company: CompanyInput!
}

input CompanyInput {
  name: String!
  # more later..
}

union AddCompanyOutput = AddCompanySuccess

type AddCompanySuccess {
  company: Company!
}

union EditCompanyOutput = EditCompanySuccess | EditCompanyFailureNotFound

type EditCompanySuccess {
  company: Company!
}

type EditCompanyFailureNotFound {
  success: Boolean
}

input CompanyFilterOperationInput {
  operator: FilterOperator!
  filters: [CompanyFilterInput!]
}

input CompanyFilterInput {
  filterOperations: [CompanyFilterOperationInput!]
  nameFilter: StringFilter
}