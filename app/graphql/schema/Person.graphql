
interface Person {
  "Requires authentication and ADMIN privileges"
  UUID: UUID!
  firstName: String!
  lastName: String!
  phone: PhoneNumber
  email: EmailAddress!
  nationality: CountryCode!
  birthday: Date!
  timestamp: Timestamp!
}

"""
Adult is over 16 years old Person
"""
type Adult implements Person {
  "Requires authentication and ADMIN privileges"
  UUID: UUID!
  firstName: String!
  lastName: String!
  phone: PhoneNumber
  email: EmailAddress!
  nationality: CountryCode!
  birthday: Date!
  timestamp: Timestamp!
  employers: [Company!]!
}

"""
Underage is under 16 years old Person
"""
type Underage implements Person {
  "Requires authentication and ADMIN privileges"
  UUID: UUID!
  firstName: String!
  lastName: String!
  phone: PhoneNumber
  email: EmailAddress!
  nationality: CountryCode!
  birthday: Date!
  timestamp: Timestamp!

}

type Query {
  persons(filters: PersonFilterOperation): [Person]! 
  person(input: PersonInput!): Person! @authenticated
}

input PersonInput {
  UUID: UUID!
}

type Subscription {
  personAdded: Person!
}

type Mutation {
  addPerson(input: AddPersonInput!): AddPersonOutput!
  editPerson(input: EditPersonInput!): EditPersonOutput!
}

input AddPersonPersonInput {
  firstName: String!
  lastName: String!
  phone: PhoneNumber
  email: EmailAddress!
  birthday: Date!
  nationality: CountryCode!
  personalIdentityCode: PersonalIdentityCode!
}

input AddPersonInput {
  person: AddPersonPersonInput!
}

union AddPersonOutput = AddPersonSuccess | UniqueConstraintViolationFailure

type AddPersonSuccess {
  person: Person!
}

input EditPersonInput {
  UUID: UUID!
  person: AddPersonPersonInput!
}

union EditPersonOutput = EditPersonSuccess 

type EditPersonSuccess {
  person: Person!
}

input PersonFilterOperation {
  operator: FilterOperator!
  filters: [PersonFilter!]
}

input PersonFilter {
  filterOperations: [PersonFilterOperation!]
  birthdayFilter: DateFilter
  nameFilter: StringFilter
}
