enum Gender {
  MALE
  FEMALE
  OTHER
}

interface Person {
  "Requires authentication and ADMIN privileges"
  UUID: UUID!
  firstName: String!
  lastName: String!
  phone: PhoneNumber
  email: EmailAddress!
  nationality: CountryCode!
  birthday: Date!
  timestamp: Timestamp!
  gender: Gender!
}

"""
Adult is over 16 years old Person
"""
type Adult implements Person {
  "Requires authentication and ADMIN privileges"
  UUID: UUID!
  firstName: String!
  lastName: String!
  phone: PhoneNumber
  email: EmailAddress!
  nationality: CountryCode!
  birthday: Date!
  timestamp: Timestamp!
  gender: Gender!
  employers: [Company!]!
}

"""
Underage is under 16 years old Person
"""
type Underage implements Person {
  "Requires authentication and ADMIN privileges"
  UUID: UUID!
  firstName: String!
  lastName: String!
  phone: PhoneNumber
  email: EmailAddress!
  nationality: CountryCode!
  birthday: Date!
  timestamp: Timestamp!
  gender: Gender!
}

type PersonsPaginationEdge {
  cursor: Cursor!
  node: Person!
}

type PersonsPaginationResponse {
  edges: [PersonsPaginationEdge!]!
  pageInfo: PageInfo!
}

union PersonsOutput = PersonsPaginationResponse | InvalidCursorFailure

type Query {
  persons(filters: PersonFilterOperationInput, sort: [PersonSortInput!], pagination: PaginationInput!): PersonsPaginationResponse!
  person(input: PersonInput!): Person!
}

input PersonInput {
  UUID: UUID!
}

type Subscription {
  personAdded: Person!
}

type Mutation {
  addPerson(input: AddPersonInput!): AddPersonOutput!
  editPerson(input: EditPersonInput!): EditPersonOutput!
}

input AddPersonPersonInput {
  firstName: String!
  lastName: String!
  phone: PhoneNumber
  email: EmailAddress!
  birthday: Date!
  nationality: CountryCode!
  personalIdentityCode: PersonalIdentityCode!
  gender: Gender!
}

input AddPersonInput {
  person: AddPersonPersonInput!
}

union AddPersonOutput = AddPersonSuccess | UniqueConstraintViolationFailure

type AddPersonSuccess {
  person: Person!
}

input EditPersonInput {
  UUID: UUID!
  person: AddPersonPersonInput!
}

union EditPersonOutput = EditPersonSuccess | UniqueConstraintViolationFailure | NotFoundFailure

type EditPersonSuccess {
  person: Person!
}

input PersonFilterOperationInput {
  operator: FilterOperator!
  filters: [PersonFilterInput!]
}

input PersonFilterInput {
  filterOperations: [PersonFilterOperationInput!]
  birthdayFilter: DateFilter
  nameFilter: StringFilter
}

enum PersonSortField {
  birthday
  firstName
  lastName
  createdAt
}

enum SortOrder {
  ASC
  DESC
}

input PersonSortInput {
  field: PersonSortField!
  order: SortOrder!
}